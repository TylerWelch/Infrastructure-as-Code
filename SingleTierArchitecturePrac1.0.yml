AWSTemplateFormatVersion: 2010-09-09
Description: Single Tier Architecture Practice

Parameters:
  DevKeyName:
    Description: Select the key name from the list
    Type: AWS::EC2::KeyPair::KeyName
  DevAvailabilityZone:
    Description: Select the AZ
    Type: String
    Default: us-east-2a
    AllowedValues:
      - us-east-2a
      - us-east-2b    
      - us-east-2c
      - us-west-1a
  DevInstanceType:
    Description: Select the ec2 instance type from list
    Type: String      
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.small
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production 

Mappings:
  DevRegionMap:
    us-east-2:
      HVM64: ami-089c6f2e3866f0f14
    us-west-1:
      HVM64: ami-0a245a00f741d6301 

Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Equals [!Ref EnvironmentName, dev]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Not [{Condition: CreateProdSecurityGroup}]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Instance Configuration"    
        Parameters:
          - DevInstanceType
          - DevKeyName
          - AvailabilityZone  
      - Label:
          default: "Environment Configuration"          
        Parameters:
          - EnvironmentName  
    ParameterLabels:
      EnvironmentName:
        default: "Which environment we are planning to create this instance?"
      KeyName:
        default: "Be aware that once keyname is selected we cannot change it unless instance replaced"
Resources:
  TheInstance:
      Type: AWS::EC2::instance
      Properties:
          ImageId: !FindInMap
          - DevRegionMap
          - !Ref 'AWS::Region'
          - HVM64
          InstanceType: !Ref DevInstanceType
          KeyName: !Ref DevKeyName
          AvailbilityZone: !Ref DevAvailabilityZone
          SecurityGroups: !If [CreateDevSecurityGroup, [!Ref DevEnvSecurityGroup], !Ref ProbEnvSecurityGroup]
          UserData: 
            Fn::Base64: |  
              #!/bin/bash
              sudo yum update
              sudo yum -y erase java-1.7.0-openjdk.x86_64
              sudo yum -y install java-1.8.0-openjdk.x86_64
              sudo yum -y install java-1.8.0-openjdk-devel
              sudo yum -y install tomcat8
              service tomcat8 start
              mkdir /usr/share/tomcat8/webapps/ROOT
              touch /usr/share/tomcat8/webapps/ROOT/index.html
              echo "Cloud Formation Tomcat8" > /usr/share/tomcat8/webapps/ROOT/index.html
#    SSHSecurityGroup:
#        Type: AWS::EC2::SecurityGroups
#        Properties:
#            GroupDescription: dev SSH SecurityGroup
#            SecurityGroupIngress:
#               - IpProtocol: tcp
#                FromPort: '22'
#                ToPort: '22'
#                CidrIP: 0.0.0.0/0
#               - IpProtocol: tcp
#                FromPort: '443'
#                ToPort: '443'
#                CidrIp: 0.0.0.0/0
    
  ProdElasticIP:
      Type: AWS::EC2:EIP
      Condition: CreateEIPForProd
      Properties:
          InstanceId: !Ref TheInstance

  DevEnvSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: CreateDevSecurityGroup
      Properties:
        GroupDescription: DevSG
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
  
  ProbEnvSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: CreateProbSecurityGroup
      Properties:
        GroupDescription: ProbSG
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0

Outputs:
  TheInstanceID:
    Description: Output of the ID of TheInstance
    Value: !Ref TheInstance
  TheInstanceDNSname:
    Description: dns of theinstance
    Value: !GetAtt TheInstance.PublicDnsName
  TheInstanceAvailibilityZone:
    Descriptiion: AZ of the instance
    Value: !GetAtt TheInstance.AvailibilityZone
    Export:
      Name: !Sub "${AWS::StackName}-InstanceAz"
  DevEnvSecurityGroup:
    Description: Dev security output
    Condition: CreateDevSecurityGroup
    Export:
      Name: !Join ["@", [!Ref 'AWS::StackName', MyDevSSHGlobalSG]]